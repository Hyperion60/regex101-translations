{
    "'{0}' found at index {1}": "'{0}' ditemukan pada indeks {1}",
    "(except for line terminators)": "(kecuali pada pengakhir baris)",
    "{1} and {2} are also available with the use of '{3}'": "",
    "{1} can be used to match the same text the third preceding capture group matched and captured.": "",
    "{1} is a line separator which can stand for {2}, {3}, {4}, or {5}.": "",
    "{1} match": "",
    "{1} matches": "",
    "{1} modifier:": "",
    "{1} step": "",
    "{1} steps": "",
    "{1} subpattern": "",
    "{1} upvotes, {2} downvotes ({3}% like it)": "",
    "{1} would be the second previous capture group, for example. {2} would be the third capture group.": "",
    "{1}, matches any position": "",
    "^ and $ match start/end of line": "",
    "$ matches only end of pattern": "",
    "3 or more of a": "",
    "a line": "",
    "acts like {1}, except that if the pattern is unanchored, the bumpalong advance is not to the next character, but to the position in the subject where {2} was encountered": "",
    "anonymous": "",
    "as few times as possible, expanding as needed": "",
    "as many times as possible, giving back as needed": "",
    "as many times as possible, without giving back": "",
    "assert position at a word boundary: {1}": "",
    "assert position where {1} does not match": "",
    "asserts position at start of {1}": "",
    "asserts position at start of the string": "",
    "asserts position at the end of a line": "",
    "asserts position at the end of the previous match or the start of the string for the first match": "",
    "asserts position at the end of the string": "",
    "asserts position at the end of the string, or before the line terminator right at the end of the string (if any)": "",
    "capture group {1}": "",
    "case insensitive": "",
    "Case insensitive": "",
    "case sensitive": "",
    "causes a skip to the next innermost alternative if the rest of the pattern does not match": "",
    "causes the whole match to fail outright if the rest of the pattern does not match": "",
    "causes token to be ignored": "",
    "contains": "",
    "does match": "",
    "empty character class â€” matches {1}": "",
    "empty string": "",
    "ends with": "",
    "equals": "",
    "Full Match": "",
    "Full match": "",
    "full match": "",
    "greedy": "",
    "Group {1}": "",
    "group did not participate in match": "",
    "insert comparison string": "",
    "insert test description": "",
    "insert test string": "",
    "insert your regular expression here": "",
    "insert your replacement value here": "",
    "insert your test string here": "",
    "inserts the matched substring": "",
    "inserts the portion of the string that follows the matched substring": "",
    "inserts the portion of the string that precedes the matched substring": "",
    "is null": "",
    "lazy": "",
    "lowercase": "",
    "marker verb whose main purpose is to track how a match was arrived at": "",
    "match the remainder of the pattern with the following effective flags: {1}": "",
    "matches a alphabetic character {1}": "",
    "matches a alphanumeric character {1}": "",
    "matches a alphanumeric character or {1} {2} (also written as {3})": "",
    "matches a backspace character {1}": "",
    "matches a carriage return {1}": "",
    "matches a character intended to be combined with another character (e.g. accents, umlauts, enclosing boxes, etc.)": "",
    "matches a character intended to be combined with another character without taking up extra space (e.g. accents, umlauts, etc.)": "",
    "matches a character that encloses the character is is combined with (circle, square, keycap, etc.)": "",
    "matches a character with {1} value {2} through {3}": "",
    "matches a combining character (mark) as a full character on its own": "",
    "matches a control character {1}": "",
    "matches a digit {1} (also written as {2})": "",
    "matches a digit zero through nine in any script except ideographic scripts": "",
    "matches a form-feed character {1}": "",
    "matches a hexadecimal digit {1}": "",
    "matches a letter or ideograph that does not have lowercase and uppercase variants": "",
    "matches a letter that appears at the start of a word when only the first letter of the word is capitalized": "",
    "matches a letter that exists in lowercase and uppercase variants (combination of {1}, {2} and {3})": "",
    "matches a line separator character {1}": "",
    "matches a line-feed (newline) character {1}": "",
    "matches a lowercase letter {1}": "",
    "matches a lowercase letter that has an uppercase variant": "",
    "matches a paragraph separator character {1}": "",
    "matches a punctuation character {1}": "",
    "matches a punctuation character such as an underscore that connects words": "",
    "matches a single character in the list": "",
    "matches a special character that is used like a letter": "",
    "matches a superscript or subscript digit, or a number that is not a digit (excluding numbers from ideographic scripts)": "",
    "matches a tab character {1}": "",
    "matches a uppercase letter {1}": "",
    "matches a vertical tab character": "",
    "matches a visible character {1}": "",
    "matches a visible character or the space character {1}": "",
    "matches a whitespace character that is invisible, but does take up space": "",
    "matches a whitespace character, including a line break {1}": "",
    "matches a whitespace character, including a line break {1} (also written as {2})": "",
    "matches an uppercase letter that has a lowercase variant": "",
    "matches any character {1}": "",
    "matches any character that's not a horizontal whitespace character": "",
    "matches any character that's not a vertical whitespace character": "",
    "matches any character, including newline": "",
    "matches any character, including unicode {1}": "",
    "matches any characters in the {1} {2}": "",
    "matches any characters that {1} does not": "",
    "matches any code point reserved for private use": "",
    "matches any code point to which no character has been assigned": "",
    "matches any currency sign": "",
    "matches any kind of closing bracket": "",
    "matches any kind of closing quote": "",
    "matches any kind of hyphen or dash": "",
    "matches any kind of letter from any language": "",
    "matches any kind of numeric character in any script": "",
    "matches any kind of opening bracket": "",
    "matches any kind of opening quote": "",
    "matches any kind of punctuation character": "",
    "matches any kind of punctuation character that is not a dash, bracket, quote or connector": "",
    "matches any kind of whitespace or invisible separator": "",
    "matches any math symbols, currency signs, dingbats, box-drawing characters, etc": "",
    "matches any mathematical symbol": "",
    "matches any non-newline character": "",
    "matches any vertical whitespace character": "",
    "matches esc {1}": "",
    "matches invisible control characters and unused code points": "",
    "matches invisible formatting indicator": "",
    "matches one half of a surrogate pair in {1} encoding": "",
    "matches the bell character {1}": "",
    "matches the character {1} with index {2} ({3} or {4}) literally ({5})": "",
    "matches the control sequence {1} {2}": "",
    "matches the negation of {1}": "",
    "matches the same text as most recently matched by the {1} capturing group": "",
    "matches the same text as most recently matched by the capturing group named {1}": "",
    "matches the same text as most recently matched by the entire pattern": "",
    "matches various symbols that are not math symbols, currency signs, or combining characters": "",
    "meaningless quantifier": "",
    "no description available": "",
    "one": "",
    "optional": "",
    "or": "",
    "Pos: {1}-{2}": "",
    "possessive": "",
    "recurses the {1} subpattern": "",
    "recurses the entire pattern": "",
    "recurses the subpattern named {1}": "",
    "regex": "",
    "result will be a tuple containing the start and end indices for the first match in the string": "",
    "result will be an iterator over tuples containing the start and end indices for each match in the string": "",
    "script": "",
    "script extension": "",
    "sets the property mode to {1}": "",
    "shorthand for {1}": "",
    "specifies a newline convention: {1}, {2} or {3}": "",
    "specifies a newline convention: {1}, {2} or {3} only": "",
    "specifies a newline convention: {1}, followed by {2}": "",
    "specifies a newline convention: all unicode newline sequences {1}": "",
    "specifies a newline convention: carriage return": "",
    "specifies a newline convention: line-feed": "",
    "starts with": "",
    "step": "",
    "steps": "",
    "subpattern {1}": "",
    "Subpatterns declared within each alternative of this construct will start over from the same index.": "",
    "the string": "",
    "this verb causes the match to end successfully, skipping the remainder of the pattern": "",
    "this verb causes the match to fail at the current starting position in the subject if the rest of the pattern does not match": "",
    "this verb sets the match limit (max iterations) for the pattern": "",
    "this verb sets the recursion limit (max depth) for the pattern": "",
    "time": "",
    "times": "",
    "unlimited": "",
    "uppercase": "",
    "with no special consideration for the \\r\\n sequence": "",
    "zero": ""
}